#!/usr/bin/env bash

set -euo pipefail

trap 'echo "[$BASH_SOURCE:$LINENO] Error: exit code $?: Command: $BASH_COMMAND"' ERR
trap 'echo "[$BASH_SOURCE:$LINENO] Interrupt received"' INT TERM

readonly SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" &> /dev/null && pwd)"
readonly RUNS_DIR="${SCRIPT_DIR}/runs"
VERBOSE=${VERBOSE:-0}

# Colors
readonly RED='\033[0;31m'
readonly GREEN='\033[0;32m'
readonly YELLOW='\033[1;33m'
readonly BLUE='\033[0;34m'
readonly MAGENTA='\033[0;35m'
readonly NC='\033[0m'

usage() {
    cat << EOF

Usage: $(basename "$0") [OPTIONS] [PATTERN]

Executes setup scripts from the 'runs' directory.

Options:
    --dry           Dry run mode - show what would be executed without running
    --help, -h      Show this help message
    --verbose, -v   Show output from all scripts
    PATTERN         Optional grep pattern to filter which scripts to run

Example:
    ./$(basename "$0") --dry
    ./$(basename "$0") "neovim"
    ./$(basename "$0") --verbose
EOF
}

log() {
    local level=$1
    shift
    local message="$*"
    local timestamp=$(date '+%Y-%m-%d %H:%M:%S')
    
    case "$level" in
        "INFO")
            echo -e "${GREEN}[INFO]${NC} ${timestamp} - $message"
            ;;
        "WARN")
            echo -e "${YELLOW}[WARN]${NC} ${timestamp} - $message"
            ;;
        "ERROR")
            echo -e "${RED}[ERROR]${NC} ${timestamp} - $message" >&2
            ;;
        "DEBUG")
            if [[ ${VERBOSE} -eq 1 ]]; then
                echo -e "${BLUE}[DEBUG]${NC} ${timestamp} - $message"
            fi
            ;;
    esac
}

check_prerequisites() {
    log "INFO" "Checking prerequisites..."
    
    # Check if running on macOS
    if [[ "$(uname)" != "Darwin" ]]; then
        log "ERROR" "This script currently only supports macOS"
        exit 1
    fi

    # Check for Homebrew
    if ! command -v brew &> /dev/null; then
        log "WARN" "Homebrew not found. Installing..."
        
        /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)" || {
            log "ERROR" "Failed to install Homebrew"
            exit 1
        }

        if [[ "$(uname -m)" == "arm64" ]]; then
            log "INFO" "Adding Homebrew to PATH for Apple Silicon Mac..."
            echo 'eval "$(/opt/homebrew/bin/brew shellenv)"' >> "$HOME/.zprofile"
            eval "$(/opt/homebrew/bin/brew shellenv)"
        fi

        log "INFO" "Homebrew installed successfully"
    else
        log "INFO" "Homebrew is already installed"
        brew update || {
            log "ERROR" "Failed to update Homebrew"
            exit 1
        }
    fi
}

execute_script() {
    local script=$1
    local script_name=$(basename "$script")
    local return_value=0

    log "DEBUG" "Starting execution of: $script_name"
    log "DEBUG" "Script path: $script"
    
    {
        if "$script"; then
            log "INFO" "Successfully executed: $script_name"
            log "DEBUG" "Exit code: $?"
            if [[ ${VERBOSE} -eq 1 ]]; then
                echo -e "${BLUE}Output from $script_name:${NC}"
                echo
            fi
            return_value=0
        else
            local exit_code=$?
            log "ERROR" "Failed to execute: $script_name (Exit code: $exit_code)"
            echo -e "${RED}Output from failed script:${NC}"
            return_value=1
        fi
    } || {
        log "ERROR" "Exception during execution of $script_name"
        return_value=1
    }

    log "DEBUG" "Finished execution of: $script_name"
    return $return_value
}


main() {
    echo -e "${MAGENTA}"
    cat << "EOF"
╔════════════════════════════════════════════╗
║         Development Setup Runner           ║
║         ----------------------             ║
║    🚀 Because Ansible just kinda sucks     ║
╚════════════════════════════════════════════╝
EOF
    echo -e "${NC}"


    local dry_run=0
    local grep_pattern=""
    local verbose=${VERBOSE}

    while [[ $# -gt 0 ]]; do
        case "$1" in
            --dry)
                dry_run=1
                ;;
            --help|-h)
                usage
                exit 0
                ;;
            --verbose|-v)
                verbose=1
                export VERBOSE=1
                ;;
            *)
                if [[ -z "$grep_pattern" ]]; then
                    grep_pattern="$1"
                else
                    log "ERROR" "Unexpected argument: $1"
                    usage
                    exit 1
                fi
                ;;
        esac
        shift
    done

    if [[ $dry_run -eq 1 ]]; then
        log "INFO" "[DRY RUN] Would install or update homebrew"
    else
        check_prerequisites
    fi

    if [[ ! -d "$RUNS_DIR" ]]; then
        log "ERROR" "runs directory not found: $RUNS_DIR"
        exit 1
    fi

    local scripts=()
    while IFS= read -r script; do
        log "DEBUG" "Found script: $script"
        scripts+=("$script")
    done < <(find "$RUNS_DIR" -mindepth 1 -maxdepth 1 -type f -perm +111 | sort)

    if [[ ${#scripts[@]} -eq 0 ]]; then
        log "WARN" "No executable scripts found in $RUNS_DIR"
        exit 0
    fi

    local executed=0
    local skipped=0
    local failed=0
    local total=${#scripts[@]}


    log "DEBUG" "Found these scripts:"
    for script in "${scripts[@]}"; do
        log "DEBUG" "  - $(basename "$script")"
    done

     log "DEBUG" "Starting script execution loop"
    for ((i=0; i<${#scripts[@]}; i++)); do
        {
            script="${scripts[$i]}"
            log "DEBUG" "=== Starting loop iteration $i of ${#scripts[@]} ==="
            script_name=$(basename "$script")
            log "DEBUG" "Current script: $script_name"
            
            if [[ -n "$grep_pattern" ]] && ! echo "$script_name" | grep -q "$grep_pattern"; then
                log "DEBUG" "Skipping $script_name due to pattern mismatch"
                ((skipped++))
                continue
            fi

            log "INFO" "Processing: $script_name"
            
            if [[ $dry_run -eq 1 ]]; then
                log "INFO" "[DRY RUN] Would execute: $script"
                ((executed++))
            else
                log "DEBUG" "About to execute $script_name"
                if execute_script "$script"; then
                    ((executed++))
                    log "DEBUG" "Execution completed successfully for $script_name"
                else
                    ((failed++))
                    log "DEBUG" "Execution failed for $script_name"
                fi
                log "DEBUG" "After execution of $script_name"
            fi

            log "DEBUG" "Current counts - executed: $executed, skipped: $skipped, failed: $failed"
            log "DEBUG" "=== End of loop iteration $i for $script_name ==="
        } || {
            log "ERROR" "Failed during processing of $script_name"
            ((failed++))
        }
    done



    log "DEBUG" "Script execution loop completed"

    echo -e "\n${MAGENTA}"
    cat << "EOF"
╔════════════════════════════════════════════╗
║               Final Summary                ║
╚════════════════════════════════════════════╝
EOF
    echo -e "${NC}"
    
    log "INFO" "Summary:"
    log "INFO" "  ✅ Executed: $executed"
    log "INFO" "  ⏭️  Skipped: $skipped"
    log "INFO" "  ❌ Failed: $failed"

    if [[ $failed -gt 0 ]]; then
        echo -e "\n${RED}⚠️  Some scripts failed to execute!${NC}"
        exit 1
    else
        echo -e "\n${GREEN}🎉 All scripts completed successfully!${NC}"
    fi
}

main "$@"

